server:
  port: 9527

spring:
  application:
    name: cloud-gateway #以微服务注册进consul或nacos服务列表内
  cloud:
    consul: #配置consul地址
      host: localhost
      port: 8500
      discovery:
        prefer-ip-address: true
        service-name: ${spring.application.name}
    gateway:
      routes:
        - id: pay_routh1 #pay_routh1                #路由的ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名
          #uri: http://localhost:8001                #匹配后提供服务的路由地址
          uri: lb://cloud-payment-service              #匹配后提供服务的路由地址(不写死,且负载均衡)
          predicates:
            - Path=/pay/gateway/get/**              # 断言，路径相匹配的进行路由
            #- RAfter=2024-12-10T23:21:30.302452+08:00[Asia/Shanghai]
            #- Before=2024-12-10T23:26:00+08:00[Asia/Shanghai]
            #- Between=2024-12-10T23:29:00+08:00[Asia/Shanghai],2024-12-10T23:30:00+08:00[Asia/Shanghai]
            #- Cookie=username,luoqun
            #- Header=X-Request-Id, \d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式
            #- Host=**.atguigu.com
            #- Query=username, \d+  # 要有参数名username并且值还要是整数才能路由
            #- RemoteAddr=192.168.5.1/24 # 外部访问我的IP限制，最大跨度不超过32，目前是1~24它们是 CIDR 表示法。(这里cmd ipconfig指令查出本机IPv4地址是192.168.5.2, 测试的时候就要把localhost改成192.168.5.2才能测试通过)
            #- Method=GET,POST
            - My=diamond #自定义的断言规则,请求必须携带参数userType=diamond才能通过
#            - name: My #这是fully expanded的配置方法,上面的例子是shortcut
#              args:
#                userType: diamond

        - id: pay_routh2 #pay_routh2                #路由的ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名
          #uri: http://localhost:8001                #匹配后提供服务的路由地址
          uri: lb://cloud-payment-service               #匹配后提供服务的路由地址(不写死,且负载均衡)
          predicates:
            - Path=/pay/gateway/info/**              # 断言，路径相匹配的进行路由

        - id: pay_routh3 #pay_routh3
          uri: lb://cloud-payment-service #匹配后提供服务的路由地址
          predicates:
            - Path=/pay/gateway/filter/**   # 断言，路径相匹配的进行路由,默认正确地址
            #- Path=/gateway/filter/**   # 断言，为配合PrefixPath测试filter,暂时注释掉/pay. 被分拆为: PrefixPath + Path
            #- Path=/XYZ/abc/{segment}    # 断言，为配合SetPath测试，{segment}的内容最后被SetPath取代. {segment}就是个占位符，等价于SetPath后面指定的{segment}内容
          filters:
#            - AddRequestHeader=X-Request-atguigu1,atguiguValue1  # 请求头kv，若一头含有多参则重写一行设置
#            - AddRequestHeader=X-Request-atguigu2,atguiguValue2
#            - RemoveRequestHeader=sec-fetch-site      # 删除请求头sec-fetch-site
#            - SetRequestHeader=sec-fetch-mode,updateTest # 将请求头sec-fetch-mode对应的值修改为updateTest
#            - AddRequestParameter=customerId,9527001 # 新增请求参数Parameter：k ，v (如果参数里面传了customerId,则还是存的传来的值)
#            - RemoveRequestParameter=customerName   # 删除url请求参数customerName，你传递过来也是null
#            - AddResponseHeader=X-Response-atguigu, BlueResponse # 新增请求参数X-Response-atguigu并设值为BlueResponse
#            - SetResponseHeader=Date,2099-12-31 # 设置回应头Date值为2099-12-31
#            - RemoveResponseHeader=Content-Type # 将默认自带Content-Type回应属性删除
#            - PrefixPath=/pay # 完整: http://localhost:9527/pay/gateway/filter 实际调用: http://localhost:9527/gateway/filter 相当于前缀被过滤器统一管理了
#            - SetPath=/pay/gateway/{segment} # {segment}表示占位符，把segment换成abcd也行但要上下一致. 测试时的地址:http://localhost:9527/XYZ/abc/filter(XYZ替换掉pay,abc替换掉gateway,filter对应{segment}所以测试时还是写filter)
#            - RedirectTo=302, http://cn.bing.com # 访问http://localhost:9527/pay/gateway/filter跳转到http://cn.bing.com
            - My=atguigu